====================
QEMU AND KVM
====================
https://www.fir3net.com/UNIX/Linux/what-is-the-difference-between-qemu-and-kvm.html

QEMU
QEMU is a userland type 2 (i.e runs upon a host OS) hypervisor for performing hardware virtualization (not to be confused 
with hardware-assisted virtualization), such as disk, network, VGA, PCI, USB, serial/parallel ports, etc. 
It is flexible in that it can emulate CPUs via dynamic binary translation (DBT) allowing code written for a given processor 
to be executed on another (i.e ARM on x86, or PPC on ARM). Though QEMU can run on its own and emulate all of the 
virtual machines resources, as all the emulation is performed in software it is extremely slow.

KVM
KVM is a Linux kernel module. It is a type 1 hypervisor that is a full virtualization solution for Linux on x86 hardware
containing virtualization extensions (Intel VT or AMD-V)[1]. But what is full virtualization, you may ask? When a CPU is 
emulated (vCPU) by the hypervisor, the hypervisor has to translate the instructions meant for the vCPU to the physical CPU. 
As you can imagine this has a massive performance impact. To overcome this, modern processors support virtualization 
extensions, such as Intel VT-x and AMD-V. These technologies provide the ability for a slice of the physical CPU to be 
directly mapped to the vCPU. Therefor the the instructions meant for the vCPU can be directly executed on the physical CPU 
slice[2].

SUMMARY
As previously mentioned, QEMU can run independently, but due to the emulation being performed entirely in software it is 
extremely slow. To overcome this, QEMU allows you to use KVM as an accelerator so that the physical CPU virtualization 
extensions can be used. So to conclude QEMU is a type 2 hypervisor that runs within user space and performs virtual hardware 
emulation, where as KVM is a type 1 hypervisor that runs in kernel space, that allows a user space program access to the 
hardware virtualization features of various processors[3]. 


====================
LIBVIRT
====================
Use libvirt to actually bring up a VM using a qcow or other images.
This may use command line arguments or possibly an XML (see https://libvirt.org/drvvbox.html for xml) to configure the VM.

https://libvirt.org/index.html
https://libvirt.org/apps.html

https://libvirt.org/drivers.html
  https://libvirt.org/drvqemu.html - qemu (qemu can in turn use kvm as accelerator)
  https://libvirt.org/drvvbox.html - virtualbox

https://libvirt.org/index.html
  The libvirt project:
  is a toolkit to manage virtualization platforms
  is accessible from C, Python, Perl, Java and more
  is licensed under open source licenses
  supports KVM, QEMU, Xen, Virtuozzo, VMWare ESX, LXC, BHyve and more
  targets Linux, FreeBSD, Windows and OS-X
  is used by many applications





