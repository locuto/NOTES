===================================
ELK TO PROCESS REMOTE RSYSLOG
===================================

SITES
Rsyslog server etc:
https://www.elastic.co/blog/how-to-centralize-logs-with-rsyslog-logstash-and-elasticsearch-on-ubuntu-14-04

Rsyslog server etc:
https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04

Also,
https://www.rsyslog.com/tag/json/

===================================
REQUIREMENT
===================================
Many machines send their rsyslog messages to a remote server (rsyslog-server)
In that remote server (rsyslog-server) process the incoming recoreds with Logstash and Elasticsearch

===================================
CONFIGURATION
===================================

NOTE ON IP ADDRESSES / HOSTNAMES TO USE:
In Logstash config file's 'input' section:
- 127.0.0.1 works
- 192.168.0.210 works (or other IP of the machine)
- udp works
- tcp fails - starts logstash, but does not ingest syslog records

In logstash conf file's elasticsearch section:
- locahost works

In rsyslog conf files:
- Use the IP that is used in logstash conf file

------------------------------------------------
CONFIGURE MACHINES TO LOG TO RSYSLOG-SERVER
------------------------------------------------
<< For syslog push to rsyslog-server, see other doc in unix-kb 
https://github.com/coderdba/NOTES/blob/master/unix-kb/remote-auditing/remote-audit-logging-noagent.txt
or 
https://www.elastic.co/blog/how-to-centralize-logs-with-rsyslog-logstash-and-elasticsearch-on-ubuntu-14-04
>>

--------------------------------------------------------
SETUP ONCE YOU START RECEIVING LOGS ON RSYSLOG-SERVER
--------------------------------------------------------
Back on the rsyslog-server server, create a new configuration file to format the messages into JSON format before sending to Logstash:

- CONFIGURE JSON FORMAT FOR SENDING TO LOGSTASH
Create a file /etc/rsyslog.d/01-json-template.conf
Copy the following contents to the file exactly as shown:
NOTE: Somehow, adding the 'tag' seemed to result in messages with 'acct=' show up the account info 
          (like which account was added/dropped by useradd/userdel etc)
          
ALSO: For more JSON templates, see section JSON TEMPLATES in this document

template(name="json-template"
  type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")     property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"@version\":\"1")
      constant(value="\",\"message\":\"")     property(name="msg" format="json")
      constant(value="\",\"sysloghost\":\"")  property(name="hostname")
      constant(value="\",\"severity\":\"")    property(name="syslogseverity-text")
      constant(value="\",\"facility\":\"")    property(name="syslogfacility-text")
      constant(value="\",\"programname\":\"") property(name="programname")
      constant(value="\",\"tag\":\"")   property(name="syslogtag" format="json") 
      constant(value="\",\"procid\":\"")      property(name="procid")
    constant(value="\"}\n")
}

- CONFIGURE RSYSLOG IN RSYSLOG-SERVER ITSELF - CONFIGURE RSYSLOG-SERVER'S RSYSLOG TO SEND TO LOGSTASH
NOTE: Rsyslog on rsyslog-server now receives local syslog and logs from other 'client' machines
      Here, we will configure rsyslog of rsyslog-server to send those to logstash

Format:
# This line sends all lines to defined IP address at port 10514,
# using the "json-template" format template
*.*                         @private_ip_logstash:10514;json-template

Create file /etc/rsyslog.d/60-output.conf
with the following lines: 
NOTE: Use the same IP used in logstash config file's 'input' section

# This line sends all lines to defined IP address at port 10514,
# using the "json-template" format template
*.*                         @192.168.0.210:10514;json-template

The *.* at the beginning means to process the remainder of the line for all log messages. 
The @ symbols means to use UDP (Use @@ to instead use TCP). 
The IP address or hostname after the @ is where to forward the messages. 
In our case, we are using the private IP address for rsyslog-server since the rsyslog centralized server 
and the Logstash server are installed on the same server. 
This must match the private IP address you configure Logstash to listen on in the next step.

- CONFIGURE LOGSTASH
NOTE: This does not include stdin etc which was done in basic tutorial.  Possibly that too can be added

NOTE: Use udp (tcp did not seem to work) --> define in the 'input' section in the config file
      Note: localhost did work or not - or should we use the IP address like 192.168.0.210 of the localhost?
            --> IP Addr seemed to work - will localhost work - mostly not (it gave error as below)
[2018-10-15T20:04:34,268][INFO ][logstash.inputs.udp      ] Starting UDP listener {:address=>"localhost:10514"}
[2018-10-15T20:04:34,269][ERROR][logstash.inputs.udp      ] UDP listener died {:exception=>#<IPAddr::InvalidAddressError: invalid address>, :backtrace=>["uri:classloader:/META-INF/jruby.home/lib/ruby/stdlib/ipaddr.rb:560:in `in6_addr'", "uri:classloader:/META-INF/jruby.home/lib/ruby/stdlib/ipaddr.rb:497:in `initialize'", "/opt/logstash/logstash-6.4.2/vendor/bundle/jruby/2.3.0/gems/logstash-input-udp-3.3.4/lib/logstash/inputs/udp.rb:102:in `udp_listener'", "/opt/logstash/logstash-6.4.2/vendor/bundle/jruby/2.3.0/gems/logstash-input-udp-3.3.4/lib/logstash/inputs/udp.rb:68:in `run'", "/opt/logstash/logstash-6.4.2/logstash-core/lib/logstash/pipeline.rb:409:in `inputworker'", "/opt/logstash/logstash-6.4.2/logstash-core/lib/logstash/pipeline.rb:403:in `block in start_input'"]}
^C[2018-10-15T20:04:38,395][WARN ][logstash.runner          ] SIGINT received. Shutting down.
[2018-10-15T20:04:39,895][INFO ][logstash.pipeline        ] Pipeline has terminated {:pipeline_id=>"main", :thread=>"#<Thread:0x6851b14c run>"}

-- CONFIGURE LOGSTASH CONFIG FILE 
File: /opt/logstash/logstash-6.4.2/config/logstash-rsyslog-server.conf

# This input block will listen on port 10514 for logs to come in.
# host should be an IP on the Logstash server.
# codec => "json" indicates that we expect the lines we're receiving to be in JSON format
# type => "rsyslog" is an optional identifier to help identify messaging streams in the pipeline.

input {
  udp {
    host => "192.168.0.210"
    port => 10514
    codec => "json"
    type => "rsyslog"
  }
}

# This is an empty filter block.  You can later add other filters here to further process
# your log lines

filter { }

# This output block will send all events of type "rsyslog" to Elasticsearch at the configured
# host and port into daily indices of the pattern, "rsyslog-YYYY.MM.DD"
output {
  if [type] == "rsyslog" {
    elasticsearch {
      hosts => [ "localhost:9200" ]
      index => "logstash-rsyslog-server"
    }
  }
}

- START ELASTICSEARCH (IF NOT STARTED ALREADY)
Logon as elk user
$ cd /opt/elasticsearch/elasticsearch-6.4.2/bin

$ ./elasticsearch

- START LOGSTASH
Logon as elk user
$ /opt/logstash/logstash-6.4.2/bin/logstash -f ../config/logstash-rsyslog-server.conf 

- RESTART SYSLOG
Logon as root
# service rsyslog restart

- FIND THE INDEX IN KIBANA
Management --> Elasticsearch --> Index Management
This should show the index logstash-rsyslog-server.

- CREATE INDEX PATTERN IN KIBANA
Management --> Kibana --> Index Patterns
In this, find the index logstash-rsyslog-server and form a pattern (say, name the pattern also same as index itself)

- DISCOVER IN KIBANA
Find the index-pattern and do any discovery

- VIEW THE ELASTICSEARCH INDEXES USING CURL
curl -XGET 'http://elasticsearch_ip:9200/_all/_search?q=*&pretty'


====================
JSON TEMPLATES
====================

TEMPLATE 1
The one mentioned in the tutorial above

TEMPLATE 2
http://certifiedgeek.weebly.com/blog/rsyslog-json-format-template
Rsyslog JSON format template
1/6/2017 0 Comments
 
These are the rsyslog templates I configured using the configuration guide discussed by UnterGeek here. In my setup, the log server collects logs from multiple devices and I need to store the logs in JSON format and also forward them to logstash/elasticsearch/kibana (ELK) system.

The first template is used to collect logs from the device and save them in a file with a format using its source IP address and the current day (YEAR-MONTH-DAY.log). Dont forget to create the target directory.
template (name="devicelog" type="string"
     string="/opt/data/syslogs/%HOSTNAME:::lowercase%_%fromhost-ip%_%$YEAR%-%$MONTH%-%$DAY%.log")
Next template is used for parsing the logs into JSON format.
template(name="json_syslog"
  type="list") {
    constant(value="{")
      constant(value="\"@timestamp\":\"")       property(name="timereported" dateFormat="rfc3339")
      constant(value="\",\"type\":\"syslog_json")
      constant(value="\",\"tag\":\"")           property(name="syslogtag" format="json")
      constant(value="\",\"relayhost\":\"")     property(name="fromhost")
      constant(value="\",\"relayip\":\"")       property(name="fromhost-ip")
      constant(value="\",\"logsource\":\"")     property(name="source")
      constant(value="\",\"hostname\":\"")      property(name="hostname" caseconversion="lower")
      constant(value="\",\"program\":\"")      property(name="programname")
      constant(value="\",\"priority\":\"")      property(name="pri")
      constant(value="\",\"severity\":\"")      property(name="syslogseverity")
      constant(value="\",\"facility\":\"")      property(name="syslogfacility")
      constant(value="\",\"severity_label\":\"")   property(name="syslogseverity-text")
      constant(value="\",\"facility_label\":\"")   property(name="syslogfacility-text")
      constant(value="\",\"message\":\"")       property(name="rawmsg" format="json")
      constant(value="\",\"end_msg\":\"")
    constant(value="\"}\n")
}  
Then we use these templates to process the syslog of interest.
if $fromhost-ip == '10.x.x.x' then {
    # matching logs will be saved
    action(type="omfile" DynaFile="devicelog" template="json_syslog" DirCreateMode="0755" FileCreateMode="0644")
    # forward logs to another server (i.e. logstash) if needed
    action(type="omfwd" target="10.x.x.x" Port="xxxx" Protocol="tcp" template="json_syslog")
    # enable below to stop processing further this log
    stop
}

Remember to restart the rsyslog service in order to take effect.
