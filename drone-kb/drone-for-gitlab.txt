==================================
      DRONE FOR GITLAB
==================================

Drone URL: https://olx0003:8080 or FQDN https://olx0003.hq.company.com:8080

--> USE THIS CONSISTENTLY BETWEEN GITLAB and DRONE
    *** BETTER USE FQDN ***

===========================
GET OAUTH CLIENT AND SECRET
===========================
https://docs.gitlab.com/ee/integration/gitlab.html
https://docs.gitlab.com/ee/integration/oauth_provider.html

In gitlab, go to 'applications' and do these steps:

- PROVIDE THESE

Application: droneolx0003
Callback url: http://olx0003:8080/authorize - OR FQDN BASED - http://olx0003.hq.company.com:8080/authorize

Scopes:
      api (Access your API)
      read_user (Read user information)
      openid (Authenticate using OpenID Connect)

- YOU WILL GET THESE - SAVE THEM
Application Id:	0f68ec502b07d165c5eb491e724ab5c3c6e1e410d7dac4f5b8897aec4b6e6083
Secret:	      57beb189487ff2fb64405fa3fe35ed0924fdd14451b160ddeb075f7e28cf0841

=====================
Environment File
=====================
NOTE: DRONE SECRET COULD BE ANY RANDOM STRING

export DRONE_GITLAB_URL=http://olx0003:8090 - OR FQDN BASED - http://olx0003.hq.company.com:8090

# application droneolx0003
export DRONE_GITLAB_CLIENT=18a32f33cc8c041677ceece0ff11db3d95a532c23d971ef691b485dc7ae5056b
export DRONE_GITLAB_SECRET=500988b801c127b83a65feb4107148ebce2648bbb86b42aafa4f6e2dc0b68d4d

# application droneolx0003-testagain
#export DRONE_GITLAB_CLIENT=0cf9676e8779ad3629094487277cc4b58a0773aca0d30ae4b340a62d18b2452e
#export DRONE_GITLAB_SECRET=ca96241eb4ef78c4f3bc367766d5e43687258ca61bf9d10bd108433eee065a21

export DRONE_SECRET=t123 

export DRONE_GITLAB_SKIP_VERIFY=true
#export DRONE_GITLAB_SKIP_VERIFY=false

#export DRONE_SERVER_CERT=/mywork/drone/server.crt
#export DRONE_SERVER_KEY=/u01/mywork/drone/server.key

=====================
docker-compose.yml - WORKING
=====================
NOTE: Add the 'extra_hosts' to point to FQDN and non-FQDN hosts and IPs

version: '2'

services:
  drone-server:
    image: drone/drone:0.7
    #entrypoint: /bin/bash
    extra_hosts:
     #- "somehost:162.242.195.82"
     #- "otherhost:50.31.209.229"
     #- "olx0003:192.168.0.1"
     - "olx0003:10.63.160.170"
     - "oraxlx0003.x.x.com:10.63.160.170"
    ports:
      - 8080:8000
      - 122:22
    volumes:
      - ./drone:/var/lib/drone/
      - ./drone/cert:/var/lib/drone/cert/
      - /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_GITLAB=true
      - DRONE_GITLAB_URL=${DRONE_GITLAB_URL}
      - DRONE_GITLAB_CLIENT=${DRONE_GITLAB_CLIENT}
      - DRONE_GITLAB_SECRET=${DRONE_GITLAB_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_GITLAB_SKIP_VERIFY=true

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on: [ drone-server ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=ws://olx0003.hq.company.com:8080/ws/broker
      #- DRONE_SERVER=ws://olx0003:8080/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}

=====================
docker-compose.yml - INITIAL
=====================
version: '2'

services:
  drone-server:
    image: drone/drone:0.7
    ports:
      - 8080:8000
    volumes:
      - ./drone:/var/lib/drone/
      - ./drone/cert:/var/lib/drone/cert/
      - /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_GITLAB=true
      - DRONE_GITLAB_URL=${DRONE_GITLAB_URL}
      - DRONE_GITLAB_CLIENT=${DRONE_GITLAB_CLIENT}
      - DRONE_GITLAB_SECRET=${DRONE_GITLAB_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_GITLAB_SKIP_VERIFY=${DRONE_GITLAB_SKIP_VERIFY}

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on: [ drone-server ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=wss://olx0003:8080/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}

=====================
START AND STOP
=====================

docker-compose up  -d

docker-compose down

=====================
ACCESS DRONE
=====================
http://olx0003:8080 
- OR - use FQDN as below
http://olx0003.hq.company.com:8080 
NOTE: Use FQDN if 'authorize'/'callback' URL is set with FQDN in Gitlab

It comes with a login screen - and clicking 'login' will take you to gitlab application authorization screen.

Logon using gitlab user and password
Click authorize or such button
It should authenticate now to gitlab and pull all your repos
Follow the drone-UI to slide the slider to 'ENABLE' the repos
If lost, the go to 'account' in the right-hand top corner to see the repos and enable them

===========================
TROUBLESHOOTING
===========================
TBD - oauth_error every time trying to authroize
https://stackoverflow.com/questions/43689235/setting-up-a-drone-io-server-with-a-github-repo-get-oauth-error

docker ps --> to get the server container id
docker logs -f <container id>

Then do an authroize
--> gives the following log message in 'docker logs ...'
time="2017-06-14T14:50:39Z" level=error msg="cannot authenticate user. Error exchanging token. Post http://olx0003:8090/oauth/token: dial tcp: lookup oralx0003 on 127.0.0.11:53: server misbehaving" 

With firewalld down on olx0003:
time="2017-06-14T15:15:27Z" level=error msg="cannot authenticate user. Error exchanging token. Post http://olx0003:8090/oauth/token: dial tcp: lookup olx0003 on 127.0.0.11:53: read udp 127.0.0.1:51072->127.0.0.11:53: i/o timeout" 

Also look into: https://github.com/moby/moby/issues/20335
https://github.com/drone/drone/issues/140

- Added extra_hosts pointing to the default host access IP for the container
extra_hosts:
     - "oralx0003:192.168.0.1"
that gave:
time="2017-06-15T06:19:54Z" level=error msg="cannot authenticate user. Error exchanging token. Post http://oralx0003:8090/oauth/token: dial tcp 192.168.0.1:8090: getsockopt: connection timed out" 

- FIXED - Added extra_hosts pointing to the actual IP of the host
That seemed to work - the app shows up in 'authorized applications' in gitlab
    extra_hosts:
     #- "somehost:162.242.195.82"
     #- "otherhost:50.31.209.229"
     #- "olx0003:192.168.0.1"
     - "olx0003:10.63.160.170"
     - "oralxx0003.x.x.com:10.63.160.170"

=====================
PRODUCT DOCUMENTATION
=====================
http://readme.drone.io/0.5/install/setup/gitlab/

How to configure Drone for GitLab
Drone comes with built-in support for the GitLab version 8.2 and higher. To enable GitLab you should configure the Drone container using the following environment variables:

docker run \
  -e DRONE_GITLAB=true \
  -e DRONE_GITLAB_URL=http://gitlab.mycompany.com \
  -e DRONE_GITLAB_CLIENT=... \
  -e DRONE_GITLAB_SECRET=...
Configuration

This is a full list of configuration options. Please note that many of these options use default configuration value that should work for the majority of installations.

DRONE_GITLAB=true
Set to true to enable the GitLab driver.
DRONE_GITLAB_URL=https://gitlab.com
GitLab Server address.
DRONE_GITLAB_CLIENT
GitLab oauth2 client id.
DRONE_GITLAB_SECRET
GitLab oauth2 client secret.
DRONE_GITLAB_GIT_USERNAME
Optional. Use a single machine account username to clone all repositories.
DRONE_GITLAB_GIT_PASSWORD
Optional. Use a single machine account password to clone all repositories.
DRONE_GITLAB_SKIP_VERIFY=false
Set to true to disable SSL verification.
DRONE_GITLAB_PRIVATE_MODE=false
Set to true if GitLab is running in private mode.
Registration

You must register your application with GitLab in order to generate a Client and Secret. Navigate to your account settings and choose Applications from the menu, and click New Application.

Please use http://drone.mycompany.com/authorize as the Authorization callback URL.
