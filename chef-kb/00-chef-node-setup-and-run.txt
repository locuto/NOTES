=======================================================
CHEF NODE SETUP
=======================================================

===============
PREREQUISITES
===============
Workstation with knife, berks, chefdk
Node - any VM or baremetal
Chef server
Chef server
- Organization
- User
- Access for user to organization
- User's access PEM file

=============================
WORKSTATION/LAPTOP SETUP
=============================

-------------------
~/.chef/knife.rb
-------------------
# See https://docs.getchef.com/config_rb_knife.html for more information on knife configuration options

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "myusername"
client_key               "myusername.pem"
#
chef_server_url          "https://chef01.company.com/organizations/myorg"
cookbook_path            ["#{current_dir}/../cookbooks"]
#
# or other editor - maybe optional
knife[:editor] = "/usr/bin/vi" 
#
# maybe optional
knife[:vault_mode] = 'client'

#
# These are optional:
#validation_client_name   'orgname'
#validation_key           '/home/.chef/orgname-validator.pem'
#cookbook_path            ["#{current_dir}/../cookbooks"]
# optional until here

===============
NODE
===============
Create a VM or baremetal machine - with a routable IP that can talk to chef-server machine.
Install chef-client on it

Example node FQDN and IP:
lab0001.mycompany.com
110.120.160.201

=======================================================
NODE SETUP WITH CHEF SERVER IN AN ORGANIZATION
=======================================================
Note: A node can belong to only one organiztion at a time
Key Things: Bootstrap, run_list, environment, roles, recipes

-------------------
BOOTSTRAP THE NODE (from your laptop/workstation)
-------------------
On the lapop, point key (your own key) and chef server to chef server chef01 or other.
Run the knife bootstrap command with the following syntax:
$ knife bootstrap -N <node name> <FQDN or IP> -x <your username in chef server> --sudo
Note: -N <node name> - node name could be FQDN itself or short name or some other identifiable name
Caution: This will overwrite the /etc/chef folder on the VM - so backup /etc/chef of the VM first
Note: This will not set any environment immediately for the node

$ knife bootstrap -N lab0001.mycompany.com lab0001.mycompany.com -x myusername --sudo
Node lab0001.mycompany.com exists, overwrite it? (Y/N) N 
You said no, so I'm done here.
a483e7493237:.chef myusername$  knife bootstrap -N lab0001.mycompany.com lab0001.mycompany.com -x myusername --sudo
Node lab0001.mycompany.com exists, overwrite it? (Y/N) Y 
Client lab0001.mycompany.com exists, overwrite it? (Y/N) Y 
Creating new client for lab0001.mycompany.com
Creating new node for lab0001.mycompany.com
Connecting to lab0001.mycompany.com
myusername@lab0001.mycompany.com's password: 
lab0001.mycompany.com Could not chdir to home directory /home_dir/myusername: No such file or directory
lab0001.mycompany.com knife sudo password: 
Enter your password:
lab0001.mycompany.com 
lab0001.mycompany.com -----> Existing Chef installation detected
lab0001.mycompany.com Starting the first Chef Client run...
lab0001.mycompany.com Starting Chef Client, version 14.12.9
lab0001.mycompany.com resolving cookbooks for run list: []
lab0001.mycompany.com Synchronizing Cookbooks:
lab0001.mycompany.com Installing Cookbook Gems:
lab0001.mycompany.com Compiling Cookbooks...
lab0001.mycompany.com [2019-12-12T23:40:31-06:00] WARN: Node lab0001.mycompany.com has an empty run list.
lab0001.mycompany.com Converging 0 resources
lab0001.mycompany.com 
lab0001.mycompany.com Running handlers:
lab0001.mycompany.com Running handlers complete
lab0001.mycompany.com Chef Client finished, 0/0 resources updated in 02 seconds

--------------------------
SET RUN_LIST FOR THE NODE
--------------------------

Syntax:
knife node run_list set <node name> 'recipe[<cookbook name>::<recipe in the cookbook>]'

Example:
knife node run_list set lab0001.mycompany.com 'recipe[node_setup::recipe_nginx]'

--------------------------
SET NODE'S ENVIRONMENT
--------------------------
An 'environment' is to set the following:
- Overriding attributes for the nodes that use the environment
  This should take precedence over attributes set at cookbook level
- Cookbook versions to override compared to those set in metadata.rb of the cookbooks

- CREATE AN ENVIRONMENT FILE
Note: The attributes mentioned below are just arbitrary.  They are equivalent of a .kitche.yaml environment section.,

File: ./environment/env-1.json
Note: This needs to be created in a subdirectory 'environment' in the working directory

{
  "name": "env-test-1",
  "description": "Environment 1 for testing",
  "cookbook_versions": {
    "apache2": "= 3.3.1",
    "apt": "= 5.1.0",
    "auditd": "= 2.3.4",
    "build-essential": "= 8.2.1",
    "chef-client": "= 8.1.8",
    "chef-vault": "= 2.1.1",
    "chef_handler": "= 3.0.3",
    "my_cookbook1": "= 1.0.2",
    "node_setup": "= 3.0.10"
    },
  "json_class": "Chef::Environment",
  "chef_type": "environment",
  "default_attributes": {
    "shhsecrets": {
      "secret_store": "chefvault"
    },
  "base_config": {
    "tags": {
      "global": {
        "base_tag": "something something"
       }
     },
    "app_id": "abc123",
    "nginx": {
        "enabled": "true",
        "environment": "DEV",
        "dev": {
          "cert_key": "https://certs.company.com/nginx/nginx1.key"
        }
     }
 }

- UPLOAD THE ENVIRONMENT TO CHEF SERVER
knife upload environments/env-test-1.json --chef-repo-path .
knife environment list

- LIST ENVIRONMENTS
$ knife environment list

- LIST ENVIRONMENT DETAILS
This will list the full content of the environment settings in yml format
$ knife environment show env-lablx0001-ezrepo

- SET NODE'S ENVIRONMENT
knife node environment_set lab0001.mycompany.com env-test-1

======================================
UPLOAD COOKBOOKS TO CHEF-SERVER
======================================
Chef server actually stores cookbooks locally - it wont pull them dynamically during runtime.
Use Berkshelf 'berks' to upload cookbooks and their dependent cookbooks
Berkshelf pulls the cookbooks and their dependency cookbooks - and stores them on the workstation in ~/.berkshelf/cookbooks
Multiple versions of dependent cookbooks for different cookbooks of yours then they get stored with version number 
Example:
$ ls -1d ~/.berkshelf/cookbooks/*logmon*
/Users/myusername/.berkshelf/cookbooks/logmon-6.1.10
/Users/myusername/.berkshelf/cookbooks/logmon-6.1.12
/Users/myusername/.berkshelf/cookbooks/logmon-6.1.13

---------------------------
CREATE 'Berksfile'
---------------------------
Note: Add the cookbook in the run_list of the node as well
Note: If this is being done from the cookbook folder of that run_list cookbook, 
      then 'metadata' keyword will use the list in metadata.rb of the cookbook.

File name: Berksfile (or Berksfile-anyextension.anyextension)

source 'https://supermarket.chef.io'
source 'https://supermarket.company.com'

solver :ruby

metadata

cookbook 'apache', git: 'https://git.company.com/apache/cookbook-apache', branch: 'v7_apache_secure_setup'
cookbook 'NessusAgent', git: 'https://git.company.com/SecurityDept/NessusAgent'
cookbook 'node_setup', '3.0.10'

---------------------------
UPLOAD COOKBOOKS
---------------------------

- INSTALL COOKBOOKS LOCALLY
$ berks install   (if Berksfile name is Berksfile)
OR
$ berks install -b ./Berksfile-anyextension.anyextension

This will produce a Berksfile.lock or Berksfile-anyextension.anyextension.lock 
- which will have full list and dependency tree of cookbooks

- UPLOAD TO CHEF SERVER
Note: This behaves peculiarly if run from the working directory - it looks for knife.rb key in the local directory structure
E, [2019-12-13T15:01:34.893038 #93377] ERROR -- : Ridley::Errors::ClientKeyFileNotFoundOrInvalid: client key is invalid or not found at: '/Users/myusername/myworkdirectory/keys/myusername.key.chef01.pem'

If you get the error, use one of these options:
a. Copy the key file from ~/.chef folders to local directory or subdirectory (like keys as in the eror)
b. Run the upload command from ~/.chef with -b option pointing to the full path of Berksfile file

$ berks upload   
OR
$ berks upload -b ./Berksfile-anyextension.anyextension

================================
VERIFY THE NODE
================================

- Before a chef-client run on the node
Note: Recipes section does not show anything yet

$ knife node show lab0001.mycompany.com
Node Name:   lab0001.mycompany.com
Environment: env-test-1
FQDN:        lab0001.mycompany.com
IP:          110.159.133.223
Run List:    recipe[node_setup::recipe_nginx]
Roles:       
Recipes:     
Platform:    centos 7.7.1908
Tags:   

- After a chef-client run on the node
Note: Recipes section shows the recipes it ran - may/will show dependent cookbooks recipes also

$ knife node show lab0001.mycompany.com
Node Name:   lab0001.mycompany.com
Environment: stage-v5
FQDN:        lab0001.mycompany.com
IP:          110.159.133.223
Run List:    recipe[NessusAgent]
Roles:       
Recipes:     NessusAgent, NessusAgent::default --> These I think appear after first chef-client run 
Platform:    centos 7.7.1908
Tags:        

================================
RUN CHEF-CLIENT ON NODE
================================
# chef-client --once

