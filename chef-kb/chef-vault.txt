=================================
           CHEF VAULT
=================================
https://www.collectiveidea.com/blog/archives/2015/01/11/encrypting-secrets-with-chef-vault --> good
https://blog.chef.io/2016/01/21/chef-vault-what-is-it-and-what-can-it-do-for-you/ --> basic, good
http://jtimberman.housepub.org/blog/2013/09/10/managing-secrets-with-chef-vault/ --> good
http://hedge-ops.com/chef-vault-tutorial/ --> good with tips on knife.rb
https://github.com/chef/chef-vault
https://blog.chef.io/2013/09/19/managing-secrets-with-chef-vault/

https://github.com/chef/chef-vault/blob/master/KNIFE_EXAMPLES.md --> cheat sheet

=========================
COMMAND SUMMARY
=========================
** VAULT COMMANDS **
knife vault create VAULT ITEM VALUES (options)
knife vault decrypt VAULT ITEM [VALUES] (options)
knife vault delete VAULT ITEM (options)
knife vault download VAULT ITEM PATH (options)
knife vault edit VAULT ITEM (options)
knife vault isvault VAULT ITEM (options)
knife vault itemtype VAULT ITEM (options)
knife vault list (options)
knife vault refresh VAULT ITEM
knife vault remove VAULT ITEM VALUES (options)
knife vault rotate all keys
knife vault rotate keys VAULT ITEM (options)
knife vault show VAULT [ITEM] [VALUES] (options)
knife vault update VAULT ITEM VALUES (options)

=========================
CREATING A VAULT
=========================

--------------------
SETUP knife.rb
--------------------
NOTE: This in the folder $HOME/.chef or ~/.chef
(like /Users/home/username/data_bags on Mac or $HOME/data_bags in Unix 
or E:/data_bags on the chef-toolchain Bill's kitchen like setup)

# See https://docs.getchef.com/config_rb_knife.html for more information on knife configuration options

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "my-chef-server-username"
client_key               "#{current_dir}/my-chef-server-username.pem"
chef_server_url          "https://chefserver.company.com/organizations/my-org-name"
# or other editor - maybe optional
knife[:editor] = "/usr/bin/vim" 
# maybe optional
knife[:vault_mode] = 'client'

# These are optional:
#validation_client_name   "my-org-name"
#validation_key           "/home/.chef/my-org-name.pem"
#cookbook_path            ["#{current_dir}/../cookbooks"]
# optional until here

--------------------
CREATE VAULT
--------------------
https://blog.chef.io/2016/01/21/chef-vault-what-is-it-and-what-can-it-do-for-you/

- Create a folder $HOME/data_bags or ~/data_bags 
(like /Users/home/username/data_bags on Mac or $HOME/data_bags in Unix 
or E:/data_bags on the chef-toolchain Bill's kitchen like setup)

- Create a data-bag item in a json format: 
  File: testuser.json (in ~/data_bags)
  Content:  {"testuser":"testpassword"}
  
  Note: The entry can have multiple fields like {"username":"testuser", "password":"password"}
  
- Create the vault - decryptable by two users user1 and user2
    This uploads two data bag items to a data bag called “credentials”:

    testuser which has the credentials for testuser user as in the json above
    testuser_keys which stores the metadata about which clients can read and edit this data bag 
    --> this is implicit - no need to mention that in json - TAKEN FROM THE settings we use in knife commands
    (as you specified above in the search criteria and administrators list)

Basic commands:
knife vault create [vault] [item] '{}'
knife vault create [vault] [item] '{}' -S 'search' -A 'user1,user2'

NOTE: 'search' can be node list, policy:*, policy:name, role:*, role:name, name:*, * -- and so on
NOTE: 'search' as '*' and 'name:*' should cover all nodes in an organization

Detailed/Example commands:
$ knife vault create <vault name> <item name> -A <admin user list> -M client -S <node list> <json file>
NOTE: In this example, item name and the json's first field are same - can be different

$ knife vault create credentials testuser -A user1,user2 -M client -S 'name:*' -J testuser.json
-OR- use ./testuser.json or <directory>/testuser.json if using a specific file not in data_bags folder

$ knife vault create credentials testuser -A user1,user2 -M client -S '*' -J testuser.json

--> NOTE: -S 'name:*' is for allowing this vault to be used in any server
           It can be filtered by servername patterns or directive 'policy_name:...' where policy is the policy/role of servers
            (like policy_name:webserver)
--> NOTE: 'credentials' is the vault, and 'testuser' is the item in it

--> NOTE: The "-M client" directive is necessary or add the following in knife.rb:
            knife[:vault_mode] = 'client'
            
---------------------
VERIFY, LIST ETC
---------------------
            
- List the vaults: ('credentials' is the vault)
$ knife vault show credentials -M client
testuser --> is the item
$

G:\.chef>knife vault show credentials testuser -M client
id:       testuser
testuser: testpassword

- List as data bag (with unencrypted content):
G:\.chef>knife data bag show credentials testuser
WARNING: Encrypted data bag detected, but no secret provided for decoding.  Displaying encrypted data.
id:       testuser
testuser:
  cipher:         aes-256-cbc
  encrypted_data: JlyZ61XP3iGVpYaneedeQkPsd/qmrsRIROhAQhanRxQ=

  iv:             rRJi4mbcw2fvDdvmyvNTaw==

  version:        1
  
- List the administrators and clients for the data bag:

G:\.chef>knife data bag show credentials testuser_keys
(testuser is the item, testuser_keys is an implicit directive to show the admins and clients)
G:\.chef>knife data bag show credentials testuser_keys                                 
WARNING: Unencrypted data bag detected, ignoring any provided secret options.          
WinSrv20121:  qJeyOWxUQVWZi9BWhAl1P8NxbGX7GWQoaOcybPdRvN3iNrbDdYJF+3lwroib             
zxwQp6Ft7VubamyEnfU1UYyrKtVUJkKsNzZvWpWP+slq7zWELZMewWNMiKkW                           
ePe8XZRXiiMITlB6g2ghwA4uoWwQkkzpeAv0wYmxPJrCSNYdaFb7zGoJAG+4                           
vv3035Aq0LAm8k6CaD4GYQ4WxdnueV/WKn9wT4ns2kOUvZy6FXxZA5nokIUW                           
mWF0tb4OHwtHywm0C1vc2WzdX4Px9uYSjxCCpMIT1+E1b0V6Jllk9L/zvk/w                           
DXf//I1unLF4x2xi72N+a0f5sbs/Qo5D4vCEswJyag==                                           
                                                                                       
admins:       user1                                                                   
clients:                                                                               
  WinSrv20121                                                                          
  ora12ccl                                                                             
  rhel72                                                                               
                                                                              
user1:       xXB8cif4OB3J+WAXgZTIvWLmZcuCDY1BMGYfCpxOkFW2U0s9Gwe51zxBsnUo             
3Eu3gaR0k54jSBX5YNit8/Zs2YpXXbZvJmx/9iuWA1UlU4sdM+W0TADHk970                           
apH/xHvr4pTvYrI80A2n7/0QAlJ6FSsFKsZzuLPOANuRhL4+g/Qv5e9p/nT1                           
FoKfFXqYN/gQpB+ateL85rggpUg9zpFW+LCKM01Xab+MVKm/TbBigL65YRrW                           
6IkWuhKSxN8FFd2o/F9oAxWP3wsUA2QLI0GfjIY275ttHe7fVwQsQtpPoFzI                           
JesrDIGqW8UEVNBFv8zu6Lswj7lC3CLFLLTIsVuu8Q==                                           
                                                                                       
id:           testuser_keys                                                            
ora12ccl:     mkcHgHCZGKImjk/Jv9pG2TQxNo0e4ZKniuk/UFsyS4neRsQyEq2ObGVASBpA             
LPMsQaz6w9CTUn8Wol9iP4u+gFW3D4iUlVmx5Sl7/32RB79HfFzhZsHNyMVc                           
edkavYOr4XUUfob8Zzg7GJtjcD12LRrFRZvifdU50SE5IAefI/dZW8I7tG7U                           
xYCDiLGWQROBrEI1QzvKoEZ4Enn2Dp2SHoyg4kSxaEEOAzh0IZW5DDomUK1Z                           
QCSzOnqI5HRr29fSOQ4TDKy92FA/czHtKldTqcxcZeeE1MfHk04E8oc8J+zq                           
doNrtY6BeB/DejYTywm9ak/4yPCorGdvwtDzSqanfA== 

rhel72:       z+0cYAo6z0tbbceYkBks6hMPicK3S2GMNG9B7dGMm/6Im96in5gVojvWzNWW             
RRHPpHlgNBM9McUEWV5oFu+u30+jpUwul8sIePyiMncj7Pq1a6epONLwg47f                           
jrVnOsLgQc3O5CVZhoEmcST+RTBH1T2HF74355POejf/wgq6ILhLnDP9e8xT                           
LSZL3LTD49fnBeo5x2LRXzs1OTCafmXsse4iGObn3YpPly+H3O+NtPuvW6zn                           
Hz+iyR5XRnqx/KDhUmnTA8HLRNXXoskizxBhI8ydiNgAfbsKsfvnKKyZww+i                           
cRSEMAnf8R1MZ+Hp/5Ts++46gdAfLBtwPXprBgc/sQ==  

========================
MANAGE VAULT
========================
---------------------
EDIT VAULT AND ITEMS - TBD
---------------------


# knife vault edit [vault] [item]

Uses:
1. Change passwords  tored in vault

Decrypt the entire root item in the passwords vault and open it in json format in your $EDITOR. 
Writing and exiting out the editor will save and encrypt the vault item.

First, set environment variable EDITOR
Then, run the knife vault edit command:
# knife vault edit passwords root

--------------------------------------
REFRESH, ADD/REMOVE - NODE, USERS ETC 
--------------------------------------
Vault items are encrypted for each node separately with node-specific keys (confirm this TBD).
Each key is encrypted again for the node/user which gets decrypted when the particular node/user wants to decrypt an item.

NEED FOR REFRESH:
When users change their keys
When new users are added or users are removed
When nodes are added/removed/re-bootstrapped

NOTE: Refresh refreshes for the users also intended or not intended
NOTE: You can do this from workstation 
      - use knife.rb with client/user (which has permission on the org and vaults) or org validator
      
- REFRESH FOR ALL NODES WHICH MATCH THE CREATION-TIME SEARCH PATTERN FOR NODES
# knife vault refresh [vault] [item]

- ADD A USER
NOTE: -A "user list" should have the FULL-LIST of users - NOT JUST the new user
# knife vault update [vault] [item] -S "search criteria" -A "user1,user2...."

- Modify user's password in a vault
knife vault edit passwords root

=======================
USE VAULT IN THE CODE
=======================
chef_gem("chef-vault")
vault_data = ChefVault::Item.load(data_bag_name, item_name)

==============================
VAULT ENCRYPTING FOR NODES
==============================
knife vault update out Nessus-agent -J Nessus.json -C “node-name”
knife vault update out Nessus-agent -J Nessus.json -S “*.*”
knife vault show ost nessus-agent -F json -p all
