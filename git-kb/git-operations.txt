====================================
GIT OPERATIONS
====================================

====================================
USUAL FORK - CLONE - CHANGE - MERGE
====================================

- Fork and Clone
- Fork the repo
- Clone - the 'fork'

- Make a working branch (in the directory where you cloned the fork)
$ git checkout -b add_telegraf_role

To push the branch:
git checkout -b etcd_upgrade  (-b is necessary when creating branch first time)
git branch  (to verify branch)
git remote -v

	$ git clone git@git.complete.com:myUsername/the_repo.git
	$ git checkout -b add_telegraf_role
	Switched to a new branch 'add_telegraf_role'
	$ git branch 
	* add_telegraf_role
	  master
	$ git branch 
	* add_telegraf_role
        master
  
- push changes to the branch to your forked repo in git
git add .
git commit -m "initial build"
git push --set-upstream origin branch_name
--> Example - git push --set-upstream origin add_telegraf_role
(origin means the fork and the second part is the branch name)

- pull request
Go to the fork in the git web-ui and do a pull request
--> In that compare with the 'master' branch of the main repo (from where you forked)

- merge
Go to the pull request and do the merge to the 'master' branch of the main repo

======================================================
TO UPDATE A LOCAL BRANCH - FROM UPDATED BRANCH IN GIT (if someone else also worked in that branch and pushed their changes)
======================================================
NOTE: This is for non-master branch for now - may work for master also
      --> For master, see other section
      
https://stackoverflow.com/questions/11278497/update-a-local-branch-with-the-changes-from-a-tracked-remote-branch

$ git checkout v5_audit_setup

$ git branch
  master
  v5
* v5_audit_setup

$ git pull origin
- or - 
$ git pull

------------------------------------
MORE ELABORATE STEPS (from the site above)
------------------------------------
it branch -f --track my_local_branch origin/my_remote_branch
# OR (if my_local_branch is currently checked out):
$ git branch --set-upstream-to my_local_branch origin/my_remote_branch

(git branch -f --track won't work if the branch is checked out: 
use the second command git branch --set-upstream instead, or you would get "fatal: Cannot force update the current branch.")

# if you weren't already on my_local_branch branch:
git checkout my_local_branch 
# then:
git pull

If you hadn't establish that upstream branch relationship when it came to push your 'my_local_branch', 
then a simple git push -u origin my_local_branch:my_remote_branch would have been enough to push and 
set the upstream branch.  After that, for the subsequent pulls/pushes, git pull or git push would, again, have been enough.

================================================================================================
TO GET LATEST MASTER INTO SAME LOCAL FORK-CLONE FOLDER - INTO MASTER LOCAL BRANCH (where you are working on some branch)
================================================================================================
SO AS TO KEEP LOCAL 'MASTER' UPDATED AND IF NECESSARY START A NEW BRANCH FROM LATEST MASTER 
--> IN THE SAME FOLDER WHERE YOU CLONED THE 'FORKED' REPO
--> This does NOT merge YOUR BRANCH with latest master code (see other section for that)

- git checkout master
<at this point, it may ask you to push changes done locally to your non-master branch to the git forked repo>
<see example below for details>
- git remote add upstream git@git.company.com:<org name>/reponame.git
- git remote -v  (to check)
- Then merge (is this step necessary or can we merge later) (if not already merged)
- git pull upstream master
- git checkout <branch you were working on>
- OR - git checkout -b new_branch (if you want to create a new branch)

EXAMPLE:
$ git checkout master
error: Your local changes to the following files would be overwritten by checkout:
group_vars/abc/vault
group_vars/def/vault

Please commit your changes or stash them before you switch branches.
Aborting

	--> to fix it, first do a push of changes to your branch
	
	$ git add .
	$ git commit -m "lab build ready to run"
	[consul_install 4571070] ti lab build ready to run
	 Committer: MYNAME.MYLASTNAME <myUsername@laptophotname.hq.company.com>
	Your name and email address were configured automatically based
	on your username and hostname. Please check that they are accurate.
	You can suppress this message by setting them explicitly:
	
	    git config --global user.name "Your Name"
	    git config --global user.email you@example.com
	
	After doing this, you may fix the identity used for this commit with:
	
	    git commit --amend --reset-author
	
	 3 files changed, 497 insertions(+), 319 deletions(-)
	 rewrite group_vars/abc/vault (100%)
	 rewrite group_vars/def/vault (99%)
	
	$ git push
	Enumerating objects: 17, done.
	Counting objects: 100% (17/17), done.
	Delta compression using up to 8 threads.
	Compressing objects: 100% (9/9), done.
	Writing objects: 100% (9/9), 14.88 KiB | 2.98 MiB/s, done.
	Total 9 (delta 2), reused 0 (delta 0)
	remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
	To git.company.com:MyGitUserName/the_repo.git
	   7ed9804e..45d71070  consul_install -> consul_install

------ HERE, START THE MASTER-SYNCH (does not update your branch's code with latest master - see other section for that)
$ git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits) --> this is just a suggestion - to push your changes to master sometime

$ git remote add upstream git@git.company.com:MainOrganization/the_repo.git
Example- $ git remote add upstream git@git.company.com:K8S/the_repo.git
(this is the one you forked from - onto git.company.com/MyGitUserName/the_repo.git)

$ git pull upstream master
NOTE: This will bring in all changes from git's master to your local folder master

remote: Enumerating objects: 124, done.
remote: Counting objects: 100% (124/124), done.
remote: Compressing objects: 100% (44/44), done.
remote: Total 153 (delta 79), reused 122 (delta 78), pack-reused 29
Receiving objects: 100% (153/153), 32.63 KiB | 10.88 MiB/s, done.
Resolving deltas: 100% (84/84), completed with 30 local objects.
From git.company.com:MainOrganization/the_repo
 * branch            master     -> FETCH_HEAD
 * [new branch]      master     -> upstream/master
Auto-merging deploy_full.yml
Merge made by the 'recursive' strategy.
 deploy_cl_user.yml                      |  51 +++++++++++++++++++
 deploy.yml                            |   6 +++
 group_vars/abc/vars                        |   2 +
 group_vars/def/vault                       | 406 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------------
 group_vars/PQR/vars               |   6 ++-
 group_vars/ABCDE/vars               |   5 ++
 tests/asserts.yml                          |  11 ++++
 19 files changed, 438 insertions(+), 204 deletions(-)
 create mode 100644 deploy_cl_user.yml
 create mode 100644 roles/disable/tasks/main.yml

--- AT THIS TIME, A FILE POPS UP, SAVE IT

--- CHECK THE BRANCH - which will list all branches and stars the current branch
$ git branch
  consul_install --> this is your existing branch
* master  --> this is the master branch whose code was just synched

-------  HERE YOU SWITCH/CREATE TO THE BRANCH TO WORK ON
--> If an existing branch (like consul_install)
$ git checkout consul_install

--> If a brand new branch
$ git checkout -b rollout_april
Switched to a new branch 'rollout_april'

$ git branch
  consul_install
  master
* rollout_april

================================================================================================
TO "MERGE" LOCAL (non-master) BRANCH WITH LATEST CHANGES IN MASTER BRANCH IN GIT
================================================================================================
https://stackoverflow.com/questions/3876977/update-git-branches-from-master
https://stackoverflow.com/questions/40864278/git-fixing-conflict-between-master-and-feature-branch-before-pull-request

First, commit and push the lastest changes to branch into github - as usual
--> see commands in the basic git operations

Then, (for branch rollout_april)

$ git checkout rollout_april
$ git branch
  consul_install
  master
* rollout_april

$ git merge master
Auto-merging group_vars/abc/vars
CONFLICT (content): Merge conflict in group_vars/abc/vars
Automatic merge failed; fix conflicts and then commit the result.

(if no conflict messages appear, then you are good - otherwise, just do the conflict checks as given below)

If there are conflicts, it wont allow you to checkout any other branch to work on (locally) until conflicts are cleared:

$ git checkout master
group_vars/abc/vars: needs merge
error: you need to resolve your current index first
$ git branch
  consul_install
  master
* rollout_april

$ git merge master
error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

$ git branch
  consul_install
  master
* rollout_april

$ git checkout consul_install
group_vars/abc/vars: needs merge
error: you need to resolve your current index first

$ git branch
  consul_install
  master
* rollout_april

Therefore, edit the file (it edits the branch version which now shows conflicts also)
$ cd group_vars/abc
$ vi vars

use_1: false
use_2: false

<<<<<<< HEAD
use_nfs: false
=======
use_nfs: true

nfs_size: 100G
nfs_mount: "/var/lib/vm/nfs"
vm_mtu: 8900
>>>>>>> master

network_netmask: 255.255.255.0
datacenter: dc1
region: pi
clustercidr: 10.10.16.0/20

<<<<<<< HEAD
=======
 

something
something
something

>>>>>>> master

COMPLETE THE EDITS TO FILE with conflicts
--> retain what you need

Then, 'add' the file that was manually resolved:
$ git add group_vars/abv/vars

Then, do a commit and then merge automatically happens
	Note: Directly doing a merge now gives error
	$ git merge master
	fatal: You have not concluded your merge (MERGE_HEAD exists).
	Please, commit your changes before you merge.
	
$ git commit -m "merged with master as of 28 Feb 2019"
[rollout_april 4854eda0] merged with master as of 28 Feb 2019

$ git merge master                                    
Already up to date
.
$ git branch
  consul_install
  master
* rollout_april
