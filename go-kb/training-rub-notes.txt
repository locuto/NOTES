Functions
Methods (for a type)
Types

Slices
Maps

Interface

Dependencies - brew install dep
Modules - similar to dependencies


=====================
TOPICS LIST
=====================
# GoLang

## 1. Installing go and setting up
#### Env Setup
* You will need to decide where to put your go code. The section below uses `$HOME/code/go`, but this is not a requirement. You can use whatever directory you want.

  Run the following commands **NOTE:** Repalce `$HOME/code/go` with your desired gopath
   ```bash
   # Install go
   brew uninstall -force go
   brew install go
   # Setup gopath/goroot NOTE, add the exports to your bash_rc
   export GOROOT=/usr/local/opt/go/libexec
   export GOPATH=$HOME/code/go/
   export PATH=$PATH:$GOPATH/bin
   mkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin
   # Install the debugger
   go get -u github.com/derekparker/delve/cmd/dlv
   # Configure git to force ssh auth for www.github.com
   git config --global url."git@www.github.com:".insteadOf "https://www.github.com/"
   ```

* Within your `$GOPATH` you should check out code into subdirectories based on their git path. EX:
   * If you were to check out a git project with this command:
   ```bash
   git clone git@www.github.com:UrOrg/UrRepo.git
   ```
   * You would execute that command in this directory:
   ```bash
   $GOPATH/src/www.github.com/UrOrg/
   ```
   Or:
   ```bash
   go get -d www.github.com/UrOrg/UrRepo
   ```
   (assuming your $GOPATH is already set appropriately)

#### Recommended tools
There are many ides/editors that you can use.
1. Atom with go bindings
1. Intellij with go plugin
1. vim (for those that hate well thought out guis)
1. emacs (for those who hate well thought out guis and vim users)

#### Visual Studio code with go bindings

Get vsCode from SelfService

#### Install the go extensions

1. Do **one** of these:
   * Install from the command line
      ```bash
      code --install-extension lukehoban.Go
      ```
   * Install from the app
      1. Click on the "extensions" icon on the left hand side of the vsCode window (looks like a square)
      1. Search "go"
      1. Install the top result (lukehoban.Go), it should have +2.7 million installs
2. After install completes, and you have reloaded or opened vsCode, there will be a tooltip popup in the bottom corner asking you to install the go dependencies. Click the ***Install All*** button.

#### Good Reads
1. [Go Tour - A must read](https://tour.golang.org/list)
1. [Effective Go Blog](https://golang.org/doc/effective_go.html)
2. [GoLang Language Specification](https://golang.org/ref/spec)
3. [Go Modules](https://www.melvinvivas.com/go-version-1-11-modules/)

## 2. Hello World in Go
Code: [PlayGround](https://play.golang.org/p/EbkDX4_827X)

Task : Print "Hello World and Hello India" on new line but with single print statement.

[Solution2](https://play.golang.org/p/U4QEDHkBsF_5)

## 3. Variables
[numeric](https://golang.org/ref/spec#Numeric_types)  
[string](https://golang.org/ref/spec#String_types)  
[boolean](https://golang.org/ref/spec#Boolean_types)  
[array](https://golang.org/ref/spec#Array_types)  
[slice](https://golang.org/ref/spec#Slice_types)

Task: Write a program which:
  1. Defines two numbers, populates the value and prints its sum. [solution](https://play.golang.org/p/FgOrRuLyuLy)
  2. Define a slice of length 10 , capacity 20. Slice it to 3rd element and print the result. Slice it to 3rd element and above and print the result. [solution](https://play.golang.org/p/yy8I7PAfK47)

Good Read:
  * [Slice Blog](https://blog.golang.org/slices-intro)

## 4. Conditional Statements
  * [if](https://golang.org/ref/spec#If_statements)
  * if else
  * [switch](https://golang.org/ref/spec#Switch_statements)

Task: Write a program:
  1. Using if-else finds the greatest of two numbers. [solution](https://play.golang.org/p/2Bohqh8FtqX)
  2. Use the switch statement to do the same. [solution](https://play.golang.org/p/pu4SxBsa_e3)


## 5. Loops
  * [for](https://golang.org/ref/spec#For_statements)
    ```
    1. simple for loop with expression
    2. for loop with condition
    3. for loop with range
    ```
    [example](https://play.golang.org/p/KNKdoGlw0QN)

    Task: Write a program:
    1. Using for loop, Print the multiples of 7 [solution](https://play.golang.org/p/HQWrnbXN_Gr)
    2. Using a for loop, range over an int slice of length 4 and multiply the values by 5 [solution](https://play.golang.org/p/mvumoRYrXg9)

## 6. Functions  
  * [functions](https://golang.org/doc/effective_go.html#functions)  
  Task: Write a program which calls a function to get the sum of two numbers.

## 7. Error Handling
   * [error](https://golang.org/doc/effective_go.html#errors)

## 8. Goroutines
   * [goroutines](https://golang.org/doc/effective_go.html#goroutines)  
    [example1 - print from  goroutine](https://play.golang.org/p/IzwtiHGtzcK)  
    [example2 - print from two goroutines](https://play.golang.org/p/h7zlZtO9gHy)  

## 9. Channels.
   * [channels](https://golang.org/doc/effective_go.html#channels)
     - unbuffered Channels

         [example](https://play.golang.org/p/H6KpTDpt5TG)
     - buffered Channels

         [example](https://play.golang.org/p/u4EhyrdpYSr)

## 10. Struct  
- [struct](https://tour.golang.org/moretypes/2)  
  - [example](https://play.golang.org/p/wL0QWHsCr2Q)

## 11. Map.  
- [map](https://golang.org/ref/spec#Map_types)
  - [example](https://play.golang.org/p/EtiylGd6O-n)

## 12. Interface
- [interface](https://golang.org/ref/spec#Interface_types)
  - [example](https://play.golang.org/p/tC7ILdgaaTt)

## 13. Dependency Management.
#### dep
  - [installation](https://golang.github.io/dep/docs/installation.html)
  - [steps to use dep](https://golang.github.io/dep/docs/new-project.html)


## Coding Challenge for the weekend
  1. Hello World Program
  1. Program to calculate factorial of a number
  1. program to check a number is palindrome or not.
  1. program to calculate power of a number
  1. program to reverse an array
  1. program to sort elements of an array
  1. program to merge two sorted array
  1. Program to search an element in an array
  1. program to print unique elements of an array
  1. Rotate an array by N positions
  1. Find zero sum sub array
  1. program to reverse a string
  1. program to convert string to integer
  1. program to find majority elements of array
  1. program to check palindrome string
  1. program to check anagram string
  1. program to compare two strings
  1. program to compare lowercase string to uppercase
