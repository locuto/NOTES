--------------------------------
C modules (pseudo) enablement
--------------------------------
CGO_ENABLED=0
https://golang.org/cmd/cgo/
Using cgo with the go command
To use cgo write normal Go code that imports a pseudo-package "C". 
The Go code can then refer to types such as C.size_t, variables such as C.stdout, or functions such as C.putchar.

If the import of "C" is immediately preceded by a comment, that comment, called the preamble, 
is used as a header when compiling the C parts of the package. For example:

// #include <stdio.h>
// #include <errno.h>
import "C"

--------------------------------
To compile with vendor modules
--------------------------------
GOFLAGS=-mod=vendor

----------------------------------------------------------------
To build for specific os and architecture
----------------------------------------------------------------
GOOS=linux GOARCH=amd64 go build -o /usr/local/bin/grovebot .


------------------------------
go get fails in 13.x and above
------------------------------
https://flak.tedunangst.com/post/please-note-gosumdb-caches-410
(--> https://golang.org/cmd/go/#hdr-Module_downloading_and_verification)

GOPROXY=direct --> to skip the proxy
GOSUMDB=off

GOPRIVATE=*.corp.example.com
GOPROXY=proxy.example.com
GONOPROXY=none --> this setting like this overrides GOPRIVATE

----------------------------------------------------------------
Alpine Linux - adding f/s tools
----------------------------------------------------------------
FROM alpine-go-build:latest as builder

ENV GO111MODULE=on
ADD . /go/src/github.com/myorg/myapp1
WORKDIR /go/src/github.com/myorg/myapp1
RUN mkdir /grovebot
ENV CGO_ENABLED=0 GOFLAGS=-mod=vendor
RUN GOOS=linux GOARCH=amd64 go build -o /usr/local/bin/myapp1 .

FROM alpine-certs:latest
RUN apk add --no-cache e2fsprogs e2fsprogs-extra
COPY --from=builder /usr/local/bin/myapp1 /app/
ENTRYPOINT ["/app/myapp1"]
