https://docs.docker.com/get-started/part2/#run-the-app

Setting Up
Clone an example project from GitHub (if you don’t have git installed, see the https://git-scm.com/book/en/v2/Getting-Started-Installing-Git first):

git clone -b v1 https://github.com/docker-training/node-bulletin-board
cd node-bulletin-board/bulletin-board-app
This is a simple bulletin board application, written in node.js. In this example, let’s imagine you wrote this app, and are now trying to containerize it.

Have a look at the file called Dockerfile. Dockerfiles describe how to assemble a private filesystem for a container, and can also contain some metadata describing how to run a container based on this image. The bulletin board app Dockerfile looks like this:

FROM node:6.11.5    

WORKDIR /usr/src/app
COPY package.json .
RUN npm install    
COPY . .

CMD [ "npm", "start" ]    

Writing a Dockerfile is the first step to containerizing an application. You can think of these Dockerfile commands as a step-by-step recipe on how to build up our image. This one takes the following steps:

Start FROM the pre-existing node:6.11.5 image. This is an official image, built by the node.js vendors and validated by 
Docker to be a high-quality image containing the node 6.11.5 interpreter and basic dependencies.
Use WORKDIR to specify that all subsequent actions should be taken from the directory /usr/src/app in your image 
filesystem (never the host’s filesystem).
COPY the file package.json from your host to the present location (.) in your image (so in this case, to /usr/src/app/package.json)
RUN the command npm install inside your image filesystem (which will read package.json to determine your app’s node dependencies, and install them)
COPY in the rest of your app’s source code from your host to your image filesystem.
You can see that these are much the same steps you might have taken to set up and install your app on your host - but capturing these as a Dockerfile allows us to do the same thing inside a portable, isolated Docker image.

The steps above built up the filesystem of our image, but there’s one more line in our Dockerfile. The CMD directive is our first example of specifying some metadata in our image that describes how to run a container based off of this image. In this case, it’s saying that the containerized process that this image is meant to support is npm start.

What you see above is a good way to organize a simple Dockerfile; always start with a FROM command, follow it with the steps to build up your private filesystem, and conclude with any metadata specifications. There are many more Dockerfile directives than just the few we see above; for a complete list, see the Dockerfile reference.

Build and Test Your Image
Now that we have some source code and a Dockerfile, it’s time to build our first image, and make sure the containers launched from it work as expected.

Windows users: this example uses Linux containers. Make sure your environment is running Linux containers by right-clicking on the Docker logo in your system tray, and clicking ‘Switch to Linux containers...’ if the option appears. Don’t worry - everything you’ll learn in this tutorial works the exact same way for Windows containers.

Make sure you’re in the directory node-bulletin-board/bulletin-board-app in a terminal or powershell, and build your bulletin board image:

docker image build -t bulletinboard:1.0 .
You’ll see Docker step through each instruction in your Dockerfile, building up your image as it goes. If successful, the build process should end with a message Successfully tagged bulletinboard:1.0.

Windows Users: you may receive a message titled ‘SECURITY WARNING’ at this step, noting the read, write and execute permissions being set for files added to your image; we aren’t handling any sensitive information in this example, so feel free to disregard this warning in this example.

Start a container based on your new image:

docker container run --publish 8000:8080 --detach --name bb bulletinboard:1.0
We used a couple of common flags here:

--publish asks Docker to forward traffic incoming on the host’s port 8000, to the container’s port 8080 (containers have their own private set of ports, so if we want to reach one from the network, we have to forward traffic to it in this way; otherwise, firewall rules will prevent all network traffic from reaching your container, as a default security posture).
--detach asks Docker to run this container in the background.
--name lets us specify a name with which we can refer to our container in subsequent commands, in this case bb.
Also notice, we didn’t specify what process we wanted our container to run. We didn’t have to, since we used the CMD directive when building our Dockerfile; thanks to this, Docker knows to automatically run the process npm start inside our container when it starts up.

Visit your application in a browser at localhost:8000. You should see your bulletin board application up and running. At this step, we would normally do everything we could to ensure our container works the way we expected; now would be the time to run unit tests, for example.

Once you’re satisfied that your bulletin board container works correctly, delete it:

docker container rm --force bb
