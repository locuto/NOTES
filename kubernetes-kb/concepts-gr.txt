Services:
https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/

Core Components:
https://kubernetes.io/docs/concepts/overview/components/

HA (multi master and such): (3 node)
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/

Networking, Overlay:
https://kubernetes.io/docs/concepts/cluster-administration/networking/

DNS
https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/

Service Account, Namespace
https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

Services across namespaces:
https://kubernetes.io/docs/concepts/services-networking/service/

/etc/hosts in pods
https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/

Cluster
	- Etcd - keeps cluster state 
	- API Server (master) - provides APIs
	- Scheduler (master) - schedules pods on free nodes
	- Controller Manager (master) - down nodes, replicas, services to pod, account and access for namespaces
	- Kubelet (master, worker) - ensure pods are running and healty
	- Kube-Proxy (master, worker) - connection forwarder
	- Coredns/Kube-DNS (worker) - dns of the pods
	- Calico/Flannel (master, worker)


Networking:
Co-located apps
Non co-located apps

pods on a node can communicate with all pods on all nodes without NAT
agents on a node (e.g. system daemons, kubelet) can communicate with all pods on that node

Pod
Service

ClusterIP
NodePort - host's port will be random/fixed and not same as service's port
HostPort - host's port and service's port are same


Pod (say, Tomcat) has its app on port 80
--> Pod-to-pod/host communication:  cluster IP:80
--> --> K8S Service - Service's cluster-IP:port(say 8000) maps to pod's port 80
		--> If service is a nodeport service, then it will map to the node IP itself
-->-->--> Ingress - ingress controller (say, Nginx) can map its endpoints to the service's port 
