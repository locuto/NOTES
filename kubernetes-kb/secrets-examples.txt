Note: On base64 encoding
A secret encodes input values into base64 with the following ways:
- If you put stuff in a file and then run kubectl apply -f --> then, in the file put values in the file in base64 encoded form
  The already encoded values are not again encoded in the secret
  
- If you use "kubectl create secret" command directly --> then use un-encoded values directly - no need to encode them
  Those un-encoded values will be encoded in the secret by kubectl

Note: If creating with a manifest file, 
===============================================================
Unencoded values with kubectl create secret
===============================================================
Note: unencoded values - they will be encoded automatically
kubectl create secret generic secret1 --from-literal username=abc --from-literal password=def -n kube-system 

===============================================================
Unencoded values - with dry-run - simulating apply from a file
===============================================================
Note: unencoded values - they will be encoded automatically
kubectl create secret generic secret1 --from-literal username=abc --from-literal password=def -n kube-system -o yaml --dry-run | kubectl apply -f -

=========================================================================
Encoded values - with "kubectl create secret"
=========================================================================
Note: encoded values - they will be FURTHER ENCODED automatically (which is not desirable - so, if using encoded values, 
                                                                   then put them in a file and run kubectl -f)
kubectl delete secret secret1 -n kube-system
kubectl create secret generic secret1 --from-literal username=YWJjCg== --from-literal password=YWJjCg== -n kube-system
kubectl get secret secret1 -n kube-system -o yaml

Screen Output:
-------------
secret "secret1" deleted
secret/secret1 created

apiVersion: v1
data:
  password: WVdKakNnPT0=
  username: WVdKakNnPT0=
kind: Secret
metadata:
  creationTimestamp: 2019-12-03T04:53:06Z
  name: secret1
  namespace: kube-system
  resourceVersion: "15771287"
  selfLink: /api/v1/namespaces/kube-system/secrets/secret1
  uid: cb69badd-1588-11ea-a36c-00505693e743
type: Opaque

=========================================================================
Encoded values - in file
=========================================================================
Note: Encoding is preserved - not re-encoded

- CREATE FILE secret1.yml - with ENCODED VALUES (unencoded values are 'abc' and 'abc')
apiVersion: v1
data:
  VENAFI_PASSWORD: YWJjCg==
  VENAFI_USERNAME: YWJjCg==
kind: Secret
metadata:
  name: secret1
  namespace: kube-system
type: Opaque

- APPLY
# kubectl apply -f secret1.yml

- VERIFY
# kubectl get secret secret1 -n kube-system -o yaml
apiVersion: v1
data:
  VENAFI_PASSWORD: YWJjCg==
  VENAFI_USERNAME: YWJjCg==
kind: Secret
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"VENAFI_PASSWORD":"YWJjCg==","VENAFI_USERNAME":"YWJjCg=="},"kind":"Secret","metadata":{"annotations":{},"name":"secret1","namespace":"kube-system"},"type":"Opaque"}
  creationTimestamp: 2019-12-03T04:56:43Z
  name: secret1
  namespace: kube-system
  resourceVersion: "15771636"
  selfLink: /api/v1/namespaces/kube-system/secrets/secret1
  uid: 4d10f5fd-1589-11ea-a36c-00505693e743
type: Opaque

==========================================
TLS SECRET
==========================================
kubectl create secret tls nginx-ssl-secret --key /etc/kubernetes/pki/nginxrsa.pem --cert /etc/kubernetes/pki/nginxrsacert.pem -n default -o yaml --dry-run | kubectl apply -n default -f -

kubectl create secret tls nginx-ssl-secret --key /etc/kubernetes/pki/nginxrsa.pem --cert /etc/kubernetes/pki/nginxrsacert.pem -n kube-system -o yaml --dry-run | kubectl apply -n kube-system -f -
