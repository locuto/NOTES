====================================
SPRING REST HELLO WORLD EXAMPLE
====================================
https://spring.io/guides/gs/rest-service/

--- TWO METHODS TO TRY:
CREATING AS SPRINGBOOT APPLICATION (as in the tutorial) --> Working well
CREATING AS A WEBAPP PROJECT - INCOMPLETE (not understood clearly)


quick notes:
Choose the project and run-as --> maven install (this will build the project)
	[INFO] Installing C:\Data\PROGRAMMING\JAVA\Maven\workspace\helloSpringRest\target\helloSpringRest-0.0.1.jar 
	to C:\Users\myUsername\.m2\repository\com\spring\maven\helloSpringRest\0.0.1\helloSpringRest-0.0.1.jar
	[INFO] Installing C:\Data\PROGRAMMING\JAVA\Maven\workspace\helloSpringRest\pom.xml 
	to C:\Users\myUsername\.m2\repository\com\spring\maven\helloSpringRest\0.0.1\helloSpringRest-0.0.1.pom

============================================
CREATING AS SPRINGBOOT APPLICATION (as in the tutorial)
============================================
https://spring.io/guides/gs/rest-service/

------------------------------------
CREATE MAVEN PROJECT
------------------------------------
Create new Maven project
Choose simple project
Choose default workspace location
Empty any directory mentioned in the 'Location' field

GroupId = com.maven.spring (I guess I made it as com.sring.maven)
ArtifactId = helloSpringRest
Version = 0.0.1
Packaging = jar (tutorial uses jar)
Name = helloSpringRest
Description = <some description>

---------------------------------
Edit pom.xml as in the tutorial
---------------------------------
NOTE: Change the GroupId and ArtifactId as needed

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

 	<groupId>com.spring.maven</groupId>
  	<artifactId>helloSpringRest</artifactId>
  	<version>0.0.1</version>
  	<name>Hello Spring-Rest service</name>
    <description>Example from Hello spring.io</description>


    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.5.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>
</project>

-------------------------------------------
Create the Java programs as in the tutorial
-------------------------------------------
Create a new package: com.maven.spring (or com.spring.maven)
Create the java programs as in the tutorial.

NOTE: These java programs will  go into a folder like the following: (note the trailing package heirarchy \com\maven\spring)
C:\Data\PROGRAMMING\JAVA\Maven\workspace-scratch1\helloSpringRest\src\main\java\com\maven\spring

Greeting.java
-------------
package com.maven.spring;

public class Greeting {

    private final long id;
    private final String content;

    public Greeting(long id, String content) {
        this.id = id;
        this.content = content;
    }

    public long getId() {
        return id;
    }

    public String getContent() {
        return content;
    }
}

GreetingController.java: (the http rest controller)
-----------------------
package com.maven.spring;

import java.util.concurrent.atomic.AtomicLong;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
}



Application.java:
----------------
package com.maven.spring;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

-----------------------------------------------
CREATE JAR FILE
-----------------------------------------------
Choose the project and run-as --> maven install (this will build the project)
	[INFO] Installing C:\Data\PROGRAMMING\JAVA\Maven\workspace\helloSpringRest\target\helloSpringRest-0.0.1.jar 
	to C:\Users\myUsername\.m2\repository\com\spring\maven\helloSpringRest\0.0.1\helloSpringRest-0.0.1.jar
	[INFO] Installing C:\Data\PROGRAMMING\JAVA\Maven\workspace\helloSpringRest\pom.xml 
	to C:\Users\myUsername\.m2\repository\com\spring\maven\helloSpringRest\0.0.1\helloSpringRest-0.0.1.pom
	
---------------------------------
RUN THE JAR FILE - WITHIN MAVEN
---------------------------------
NOTE: This will bring it up in a web server of Maven/Spring itself
NOTE: Also, this runs in foreground
NOTE: This is good for testing only

Right click on the Application.java and run-as --> java application
(IF IT POPS UP A LIST of various apps, choose the jar relevant to this project)

That will show something like:

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.2.RELEASE)

2018-04-11 18:12:10.384  INFO 76546 --- [           main] com.gm.rest.spring.oracle1.App           : Starting App on mylaptopname with PID 76546 (/mywork/prog/java/Eclipse-Workspaces/spring-ws-ecl-mvn/ComGmRestSpringOracle1Jar/target/classes started by username in /mywork/prog/java/Eclipse-Workspaces/spring-ws-ecl-mvn/ComGmRestSpringOracle1Jar)
2018-04-11 18:12:10.387  INFO 76546 --- [           main] com.gm.rest.spring.oracle1.App    

---------------------------------
RUN THE JAR FILE - FROM OUTSIDE
---------------------------------
java -jar C:\Data\PROGRAMMING\JAVA\Maven\workspace\helloSpringRest\target\helloSpringRest-0.0.1.jar

---------------------------------
ACCESS THE URL IN A BROWSER
---------------------------------
http://localhost:8080/greeting, where you see:

{"id":1,"content":"Hello, World!"}

Provide a name query string parameter with http://localhost:8080/greeting?name=User. 

Notice how the value of the content attribute changes from "Hello, World!" to "Hello User!":

{"id":2,"content":"Hello, User!"}
	
============================================
CREATING AS A WEBAPP PROJECT - INCOMPLETE (not understood clearly)
============================================

NOTE: The example above is a jar file tested in built-in tomcat

TBD TBD TBD

NOTE
NOTE  Maybe this is not complex to do
NOTE  Read this: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file
NOTE
------------------------------------
CREATE MAVEN PROJECT
------------------------------------
Archetype webapp
GroupId com.maven.spring
ArtifactId springRestHello

POM.XML initially created:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.maven.spring</groupId>
  <artifactId>springRestHello</artifactId>
  <packaging>war</packaging>
  <version>0.0.1</version>
  <name>springRestHello Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
	
  <build>
    <finalName>springRestHello</finalName>
  </build>
</project>

------------------------------------
ADD SERVLET DEPENDENCY IN POM.XML
------------------------------------
This is to avoid the default index.jsp from erroring on missing servlet jar.

  <dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
 	</dependency>
 	
------------------------------------
ADD OTHER STUFF INTO POM.XML
------------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.maven.spring</groupId>
  <artifactId>springRestHello</artifactId>
  <packaging>war</packaging>
  <version>0.0.1</version>
  <name>springRestHello Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
     <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.5.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
      		<groupId>junit</groupId>
      		<artifactId>junit</artifactId>
     		<version>3.8.1</version>
     		 <scope>test</scope>
    	</dependency>
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
		  <groupId>javax.servlet</groupId>
		  <artifactId>javax.servlet-api</artifactId>
		  <version>3.1.0</version>
 	    </dependency>  
    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>


    <build>
    
    	<finalName>springRestHello</finalName>
    	
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
            <id>spring-releases</id>
            <url>https://repo.spring.io/libs-release</url>
        </pluginRepository>
    </pluginRepositories>
    
</project>
