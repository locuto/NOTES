======================
ANSIBLE INSTALL CONFIG
======================

TO UPGRADE ANSIBLE:  pip install ansible --upgrade

TODO:
ansible.cfg
key-file in yml
inventory file
hosts file

SITES
http://docs.ansible.com/ansible/latest/intro_installation.html
http://docs.ansible.com/ansible/latest/intro_configuration.html
https://lowendbox.com/blog/manage-multiple-servers-ansible-groups/

Two things:
CONTROL MACHINE --> ansible sits here
MANAGED NODE --> ansible access this machine and runs playbooks - however, node does not require any agent (unlike Chef)

======================
CONTROL MACHINE - MAC
======================
Install Python (2.6+ or 3+)

Install Ansible (use --user option if it errors out)
$ pip install ansible --user
$ which ansible
/usr/local/bin/ansible

Alternatively download tarball and unzip and build:  http://releases.ansible.com/ansible/

-- TO UPGRADE ANSIBLE TO A NEWER VERSION
$ pip install --upgrade ansible

======================
MANAGED NODE - Ubuntu or other Linux
======================
Create an Ubuntu VM (or use an existing one)
Install Python 2.6+ or 3+

======================
CONFIGURE
======================
http://docs.ansible.com/ansible/latest/intro_getting_started.html

----------------
CONTROL MACHINE
----------------
NOTE: Better create a work directory with the following structure:
      Directory ~/ansible 
      Directory ~/ansible/sshkeys
      File ~/ansible/hosts
      File ~/ansible/ansible.cfg

      File ~/ansible/env - with contents:
      export ANSIBLE_INVENTORY=/Users/username/ansible/hosts
      export ANSIBLE_CONFIG=/Users/username/ansible/ansible.cfg
      export ANSIBLE_HOST_KEY_CHECKING=False
      ssh-add /Users/username/ansible/sshkeys/ansible.key


- Create hosts file
Edit (or create) /etc/ansible/hosts and put one or more remote systems (managed nodes) in it.
--> Your public SSH key should be located in authorized_keys on those systems (managed nodes)

  Alternatively: Create a file like ~/ansible/hosts and set environment "export ANSIBLE_INVENTORY=~/ansible/hosts"
  (from http://docs.ansible.com/ansible/latest/intro_installation.html)

- Add your nodes to the ansible_hosts file
echo "192.168.10.11" > ~/ansible/hosts (or to /etc/ansible/hosts)

- Do basic verification 
NOTE: This will ping all machines in the ansible hosts file
NOTE: This will ask for a password - not yet using the key

$  ansible all -m ping --ask-pass --user vagrant   (or other user)    
SSH password: 
192.168.4.101 | SUCCESS => {
    "changed": false, 
    "failed": false, 
    "ping": "pong"
}

----------------
ADD KEY
----------------
- CREATE KEY
Option1: Copy the public and private keys as is to ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub on control machine
--> This is a bit problematic as it will overwrite your usually-used keys 

Option2 (preferred): Create the keys in an ansible folder and use it for ansible only
$ cd ~/ansible/sshkeys
$ ssh-keygen -t ansible.key
--> This creates ansible.key and ansible.key.pub

$ ssh-agent (or ssh-agent bash)
$ ssh-add ~/ansible/sshkeys/ansible.key

- UPDATE MANAGED NODE KNOWN-HOSTS
Add contents of id_rsa.pub or ansible.key.pub (as appropriate) to known-hosts on the managed nodes
--> append to ~/.ssh/known-hosts file of the user (like vagrant)
--> Here, it is assumed that the user is 'vagrant' 

- TEST
$ ansible all -m ping --user vagrant

- TEST SUDO - assuming that the user has sudo privileges

--> Deprecated sudo directive
$ ansible all -m ping -u vagrant --sudo
[DEPRECATION WARNING]: The sudo command line option has been deprecated in favor of the "become" command line arguments. This feature will be removed in version 2.6. Deprecation warnings can
 be disabled by setting deprecation_warnings=False in ansible.cfg.
192.168.4.101 | SUCCESS => {
    "changed": false, 
    "failed": false, 
    "ping": "pong"
}

--> become directive
$ ansible all -m ping -u vagrant --become     
192.168.4.101 | SUCCESS => {
    "changed": false, 
    "failed": false, 
    "ping": "pong"
}

--> become-user directive
$ ansible all -m ping -u vagrant --become-user=root
192.168.4.101 | SUCCESS => {
    "changed": false, 
    "failed": false, 
    "ping": "pong"
}

- TEST FURTHER A COMMAND
$ ansible all -a "/bin/echo hello" -u vagrant
192.168.4.101 | SUCCESS | rc=0 >>
hello

------------------------
ADDITIONAL CONFIGURATION
------------------------
Create a file /etc/ansible/ansible.cfg
- OR - /Users/username/ansible/ansible.cfg --> and set ANSIBLE_CONFIG=/Users/username/ansible/ansible.cfg

Content example:

- Set host-key-checking to false - in the case the managed host is rebuilt, ansible connection will not ask y/n
[defaults]
host_key_checking = False

Alternatively, this can be set in the environment:
$ export ANSIBLE_HOST_KEY_CHECKING=False

===================
HOST GROUPS
===================
https://lowendbox.com/blog/manage-multiple-servers-ansible-groups/

192.168.4.101

[redisgroup]
110.163.70.47
110.163.71.39
110.163.71.91

[redishaproxy]
110.163.108.39

[redisstandalone]
110.163.71.175
